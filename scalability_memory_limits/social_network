How would you design the data structures for a very large social network like
Facebook or Linkedin? Describe how you would design an algorithm to show
the connection, or path, between two people (e.g., Me -> Bob -> Susan -> Jason
-> You).



Step 1: Simplify the Problem — Forget About the Millions of Users

class User
  attr_accessor :friends
  def initialize
    @friends = []
  end

  def connect(other)
    @friends << other
    other.friends << self
  end
end

If I wanted to find the connection between two people, I would start with one person
and do a simple breadth first search.
Don't use dfs because dfs is not efficient if two users might be only one degree.

Step 2: Handle the Millions of Users
When we deal with a service the size of Linkedin or Facebook, we cannot possibly keep
all of our data on one machine. That means that our simple Person data structure from
above doesn't quite work—our friends may not live on the same machine as we do.
Instead, we can replace our list of friends with a list of their ids, and traverse as follows:
1. For each friend id: machine_id = machine_id(user_id)
2. Go to machine #machine_index
3. On that machine, do: friend = user_by_user_id(user_id)